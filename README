
MEET LARRY

    Larry is a labeled Numpy array. Here's a 2d larry, y, in schematic form:
    
                                   date1    date2    date3
                          'AAPL'   123.45   127.23   132.60
                     y =  'IBM'    234.56   234.56   234.56
                          'DELL'   456.67   460.07   458.23
                
    Larry stores the data as a Numpy array and the labels as a list of lists
    (one for each dimension):
    
        y.label = [['AAPL', 'IBM', 'DELL'], [date1, date2, date3]]
        y.x = np.array([[123.45, 127.23, 132.60],
                        [234.56, 234.56, 234.56],
                        [456.67, 460.07, 458.23]])               
    
    A larry can have any dimension. Here, for example, is one way to create a
    1d larry:

    >>> from la import larry
    >>> from numpy import array
    >>> y = larry(array([1, 2, 3]), [['a', 'b', 'c']])
    
    The simplest way to create a larry in an interactive session:
    
    >>> y = larry([1, 2, 3])
    
    The list is converted to a Numpy array and the labels default to range(n),
    where n in this case is 3.
    
    Larry has many builtin methods such as movingsum, ranking, merge, shuffle,
    zscore, demean, lag as well as the typical Numpy methods like sum, max,
    std, sign, clip. NaNs are treated as missing data.
    
    Alignment is automatic when you add (or subtract, multiply, divide) two
    larrys.
    
    You can save and load larrys in hdf5 or npz format using a dictionary-like
    interface:
    
    >>> x = la.larry([1,2,3])
    >>> io = la.IO('/tmp/dataset.hdf5')
    >>> io['x'] = x   # <--- save
    >>> z = io['x']   # <--- load
    >>> (x == z).all()
        True
       
    For the most part larry acts like a Numpy array. And, whenever you want,
    you have direct access to the Numpy array that holds your data. For
    example if you have a function, myfunc, that works on Numpy arrays and
    doesn't change the shape of the array, then you can use it on a larry, y,
    like this:
    
                           y.x = myfunc(y.x)
    
    So larry adds the convenience of labels, provides many builtin functions,
    and let's you use your exisiting array functions.       

REQUIREMENTS

    To run larry you need Python, Numpy, and Scipy. Python 2.6 and Numpy 1.4
    are recommended. Larry currently contains no extensions, just Python code,
    so there is nothing to compile. Just save the la directory and make sure
    Python can find it.
    
    Then run:
    
    >>> import la
    >>> la.test()
    
